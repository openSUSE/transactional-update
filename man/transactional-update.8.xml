<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
                   "http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">

<!--  \-*\- nroff \-*\- -->
<!--  Copyright 2016, 2017 Thorsten Kukuk &lt;kukuk@suse.de&gt; -->

<!--  This file is part of transactional\-update. -->

<!--  This program is free software; you can redistribute it and/or -->
<!--  modify it under the terms of the GNU General Public License as -->
<!--  published by the Free Software Foundation; either version 2 of the -->
<!--  License, or (at your option) any later version. -->

<!--  This program is distributed in the hope that it will be useful, -->
<!--  but WITHOUT ANY WARRANTY; without even the implied warranty of -->
<!--  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU -->
<!--  General Public License for more details. -->

<!--  You should have received a copy of the GNU General Public -->
<!--  License along with This program see the file COPYING.  If not, -->
<!--  write to the Free Software Foundation, Inc., 51 Franklin Street \- Suite 500, -->
<!--  Boston, MA 02111\-1307, USA. -->

<refentry id='transactional-update.8'>
  <refentryinfo>
    <title>transactional-update</title>
    <productname>transactional-update</productname>

    <authorgroup>
      <author>
        <contrib></contrib>
        <firstname>Thorsten</firstname>
        <surname>Kukuk</surname>
        <email>kukuk@suse.com</email>
      </author>
    </authorgroup>
  </refentryinfo>

  <refmeta>
    <refentrytitle>transactional-update</refentrytitle>
    <manvolnum>8</manvolnum>
    <refmiscinfo class='setdesc'>transactional-update</refmiscinfo>
  </refmeta>

  <refnamediv id='name'>
    <refname>transactional-update</refname>
    <refname>transactional-update.service</refname>
    <refname>transactional-update.timer</refname>
    <refpurpose>Apply updates to the system in an atomic way via transactional
    updates.</refpurpose>
  </refnamediv>

<!-- body begins here -->
  <refsynopsisdiv id='synopsis'>
    <cmdsynopsis>
      <command>transactional-update</command>
      <arg choice='opt' rep='repeat'><replaceable>options</replaceable></arg>
      <arg choice='opt' rep='repeat'><replaceable>general-command</replaceable></arg>
      <arg choice='opt'><replaceable>package-command</replaceable>
        <arg choice='opt' rep='repeat'><replaceable>command-argument</replaceable></arg>
      </arg>
    </cmdsynopsis>
    <cmdsynopsis>
      <command>transactional-update</command>
      <arg choice='opt' rep='repeat'><replaceable>options</replaceable></arg>
      <arg choice='plain'><replaceable>standalone-command</replaceable></arg>
    </cmdsynopsis>
    <para><filename>transactional-update.service</filename></para>
    <para><filename>transactional-update.timer</filename></para>
  </refsynopsisdiv>

<refsect1 id='description'><title>DESCRIPTION</title>
<para><command>transactional-update</command> updates the system
in a transactional way; this means updates are atomic, so either the patches
are fully applied or nothing is changed. The update does not influence the
running system and it can be rolled back. To activate the changes, the system
needs to be rebooted.
</para>
<para>
To achieve this <command>transactional-update</command> is using Btrfs'
snapshot mechanism, combined with the default distribution tools. Whenever an
update of the root file system is going to be performed,
<citerefentry project='snapper'><refentrytitle>snapper</refentrytitle><manvolnum>8</manvolnum></citerefentry>
will create a new snapshot of the root file system first. This new snapshot is
then used to perform the update, e.g. by calling
<citerefentry project='zypper'><refentrytitle>zypper</refentrytitle><manvolnum>8</manvolnum></citerefentry>
with the <option>-R</option> option pointing to the new snapshot.
If no errors occured the snapshot will be set as the new default snapshot and
set as read-only. In case of errors the snapshot will be deleted again.
</para>
<para>
By default the snapshot is always branched off from the current root file
system, i.e. calling <command>transactional-update</command> multiple times
without rebooting will create separate, independent snapshots, not containing
the changes of the previous run. If multiple consecutive actions are to be
executed, the <option>--continue</option> option can be used. This will still
create a separate snapshot for each call, so it is possible to roll back to
previous intermediate steps in case of errors.
</para>
<para>
On <emphasis>read-only systems</emphasis> each snapshot will have a
corresponding <filename class='directory'>/etc</filename> overlay located in
<filename class='directory'>/var/lib/overlay</filename>. As configuration files
may be modified after a snapshot was created and before a reboot is performed
(e.g. via configuration management software) the overlay file system will use
multiple lower layers, i.e. changes in older layers will be visible in newer
snapshots, but not vice versa. To keep the number of layers at a minimum and the
amount of data stored in the overlays low the
<filename class='directory'>/etc</filename> state of the oldest still available
snapshot is synchronized into the new root file system; unused overlays will be
removed at a later time (see the <option>cleanup</option> option).
</para>
<warning>
If a file in <filename class='directory'>/etc</filename> has been changed
during the update and is <emphasis>also</emphasis> changed in the running
system after the snapshot has been taken, then only the version of the new
snapshot will be visible after a reboot.
When booting into the new snapshot for the first time
<filename>transactional-update-etc-cleaner.service</filename> will print a
warning about such conflicts to the system log file.
</warning>
<para>
Older transactional-update versions were using a single
<filename class='directory'>/etc</filename> overlay for all snapshots; a
migration mechanism is in place, the directory will also be removed if no
snapshot is using it any more.
</para>
<para>
On <emphasis>read-write systems</emphasis> please be aware that all changes
done to the running root filesystem after snapshot creation are lost after the
next reboot. For this reason the system should be rebooted as fast as possible
after a successful update.
</para>
<para>For easier maintenance of big clusters,
<command>transactional-update</command> is run by
<citerefentry project='systemd'><refentrytitle>systemd.timer</refentrytitle><manvolnum>5</manvolnum></citerefentry>
in regular intervals. The specific time can be configured in
<filename>/etc/systemd/system/transactional-update.timer.d/local.conf</filename>. See
<citerefentry project='systemd'><refentrytitle>systemd.unit</refentrytitle><manvolnum>5</manvolnum></citerefentry>
for more information.
</para>
</refsect1>

<refsect1 id='commands'><title>COMMANDS</title>
<para>
  If none of the following commands is given <option>up</option> will be
  assumed.
</para>
<refsect2 id='general_commands'><title>General Commands</title>
<para>
  General Commands can be used together in any combination; additionally they
  can be extended with one <link linkend='pkg_commands'>Package Command</link>.
  The order of the General Commands doesn't matter.
</para>
<variablelist remap='TP'>
  <varlistentry>
    <term><option>cleanup</option></term>
    <listitem>
      <para>If the current root filesystem is identical to the active root
      filesystem (means after a reboot, before
      <command>transactional-update</command> creates a new snapshot with
      updates), all old snapshots without a cleanup algorithm get a cleanup
      algorithm set. This is to make sure, that old snapshots will be deleted
      by snapper. See the section about cleanup algorithms in
      <citerefentry project='snapper'><refentrytitle>snapper</refentrytitle><manvolnum>8</manvolnum></citerefentry>.
      </para>
      <para>
	Also removes all unreferenced (and thus unused)
	<filename class='directory'>/etc</filename> overlay directories in
	<filename class='directory'>/var/lib/overlay</filename>.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><option>grub.cfg</option></term>
    <listitem>
      <para>
	<citerefentry
	    project='linux.org'><refentrytitle>grub2-mkconfig</refentrytitle><manvolnum>8</manvolnum></citerefentry>
	is called to create a new <filename>/boot/grub2/grub.cfg</filename>
	configuration file for the bootloader.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><option>bootloader</option></term>
    <listitem>
      <para>
	Same as <option>grub.cfg</option>, but will also rewrite the bootloader itself.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><option>initrd</option></term>
    <listitem>
      <para>
	A new initrd is created in a snapshot.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><option>kdump</option></term>
    <listitem>
      <para>
	A new initrd for kdump is created in a snapshot.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><option>reboot</option></term>
    <listitem>
      <para>
	Trigger a reboot after updating the system.
      </para>
      <para>
	Several different reboot methods are supported, configurable via the
	<option>REBOOT_METHOD</option> configuration option in
	<citerefentry><refentrytitle>transactional-update.conf</refentrytitle><manvolnum>5</manvolnum></citerefentry>.
	By default
	<citerefentry><refentrytitle>rebootmgrd</refentrytitle><manvolnum>8</manvolnum></citerefentry>
	will be used to reboot the system according to the configured policies
	if the service is running, otherwise <command>systemctl reboot</command>
	will be called.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><option>run</option> <replaceable>cmd</replaceable></term>
    <listitem>
      <para>
	Execute the the command <replaceable>cmd</replaceable> inside
	a new snapshot. By default this snaphot will remain, but if
	<option>--drop-if-no-chage</option> is set, the new snapshot
	will be dropped if there is no change in the file system.
      </para>
      <para>
	This command consumes all the remaining parameters, so should
	be placed the in the last position.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><option>shell</option></term>
    <listitem>
      <para>
	Opens a shell to execute commands like zypper manually.
	After all actions are done, before the snapshot with the changes is
	unmounted and switched to read-only, a shell is started in the new
	snapshot as chroot environment for testing and debugging.
      </para>
    </listitem>
  </varlistentry>
</variablelist>
</refsect2>
<refsect2 id='pkg_commands'><title>Package Commands</title>
<para>
  Package Commands will invoke
  <citerefentry project='zypper'><refentrytitle>zypper</refentrytitle><manvolnum>8</manvolnum></citerefentry>
  to perform actions on the RPM packages. Only one Package Command can be used
  at the same time. Can be combined with any number of
  <link linkend='general_commands'>General Commands</link>.
</para>
<para>
  By default commands usually invoked from scripts are called in
  non-interactive mode (assuming the default answer in case of questions),
  commands typically called by the user are called in interactive mode.
  The behaviour can be changed or enforced using the
  <option>--interactive</option> respectively the
  <option>--non-interactive</option> options.
</para>
<para>
  To facilitate scripting Package Commands will exit early if no packages were
  updated; if combined with
  <link linkend='general_commands'>General Commands</link> those will not be
  executed any more in that case.
</para>
<refsect3 id='ni_pkg_commands'><title>Non-interactive Package Commands</title>
<variablelist>
  <varlistentry>
    <term><option>dup</option></term>
    <listitem>
      <para>
	If new updates are available, a new snapshot is created and
	<command>zypper dup --no-allow-vendor-change</command> is used to
	update the snapshot. Afterwards, the snapshot is activated and will be
	used as the new root filesystem during next boot.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><option>up</option></term>
    <listitem>
      <para>
	If new updates are available, a new snapshot is created and
	<command>zypper up</command> is used to update the snapshot.
	Afterwards, the snapshot is activated and will be used as the new root
	filesystem during next boot.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><option>patch</option></term>
    <listitem>
      <para>
	If new updates are available, a new snapshot is created and
	<command>zypper patch</command> is used to update the snapshot.
	Afterwards, the snapshot is activated and will be used as the new root
	filesystem during next boot.
      </para>
    </listitem>
  </varlistentry>
</variablelist>
</refsect3>
<refsect3 id='i_pkg_commands'><title>Interactive Package Commands</title>
<variablelist>
  <varlistentry>
    <term><option>migration</option></term>
    <listitem>
      <para>
	On systems which are registered against the SUSE Customer Center (SCC)
	or SMT, a migration to a new version of the installed products can be
	made with this option.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><option>pkg</option> <replaceable>command</replaceable> <replaceable>arguments</replaceable></term>
    <listitem>
      <para>
	Calls <command>zypper</command> with the given
        <replaceable>command</replaceable> and
        <replaceable>arguments</replaceable>. The arguments are typically one
        or more package names, but can be any
        <citerefentry project='zypper'><refentrytitle>zypper</refentrytitle><manvolnum>8</manvolnum></citerefentry>
        parameter for the given command including options. The following
        commands are supported:
      </para>
      <variablelist>
	<varlistentry>
	  <term><option>install</option></term>
	  <term><option>in</option></term>
	  <listitem>
	    <para>
	      Installs additional software.
	      See the <option>install</option> description in the "Package
              Management Commands" section of zypper's man page for all
              available arguments.
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><option>remove</option></term>
	  <term><option>rm</option></term>
	  <listitem>
	    <para>
	      Removes installed software.
              See the <option>remove</option> description in the "Package
              Management Commands" section of zypper's man page for all
              available arguments.
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><option>update</option></term>
	  <term><option>up</option></term>
	  <listitem>
	    <para>
	      Update selected software.
              See the <option>update</option> description in the "Update
              Management Commands" section of zypper's man page for all
              available arguments.
	    </para>
	  </listitem>
	</varlistentry>
      </variablelist>
    </listitem>
  </varlistentry>
</variablelist>
</refsect3>
</refsect2>
<refsect2 id='standalone_commands'><title>Standalone Commands</title>
<variablelist>
  <varlistentry>
    <term><option>rollback</option> <optional><replaceable>number</replaceable></optional></term>
    <listitem>
      <para>
	Sets the default root file system. On a read-only system the root
	file system is set directly using <command>btrfs</command>. On
	read-write systems
	<citerefentry project='snapper'><refentrytitle>snapper</refentrytitle><manvolnum>8</manvolnum></citerefentry>
	<option>rollback</option> is called.
      </para>
      <para>
	If no snapshot number is given, the current root file system is set as
	the new default root file system.
	Otherwise <replaceable>number</replaceable> can either be a snapshot
	number (as displayed by <command>snapper list</command>) or the word
	<option>last</option>. <option>last</option> will try to reset to the
	latest working snapshot.
      </para>
    </listitem>
  </varlistentry>
</variablelist>
</refsect2>
</refsect1>
<refsect1 id='options'><title>OPTIONS</title>
<variablelist>
  <varlistentry>
    <term><option>--interactive</option></term>
    <term><option>-i</option></term>
    <listitem>
      <para>Calls zypper in interactive mode, even if the default for this command is non-interactive.</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><option>--non-interactive</option></term>
    <term><option>-n</option></term>
    <listitem>
      <para>Calls zypper in non-interactive mode, even if the default for this command is interactive.</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><option>--continue</option> <optional><replaceable>number</replaceable></optional></term>
    <term><option>-c</option> <optional><replaceable>number</replaceable></optional></term>
    <listitem>
      <para>Use the given snapshot or, if no number is given, the current
	default snapshot as a base for the next snapshot.</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><option>--no-selfupdate</option></term>
    <listitem>
      <para>Skip checking for newer transactional-update versions.</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><option>--drop-if-no-change</option></term>
    <term><option>-d</option></term>
    <listitem>
      <para>If the action does not produce a change in the underlying
      file system, the snapshot will be dropped.</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><option>--quiet</option></term>
    <listitem>
      <para>Don't print warnings and informational messages to stdout.</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><option>--help</option></term>
    <term><option>-h</option></term>
    <listitem>
      <para>Display help and exit</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><option>--version</option></term>
    <listitem>
      <para>Output version information and exit</para>
    </listitem>
  </varlistentry>
</variablelist>
</refsect1>

<refsect1 id='important'><title>IMPORTANT</title>
<para>
  Only RPMs which are fully part of the root filesystem and
  <filename class='directory'>/etc</filename> can be updated. There is also
  limited handling for adding files and directories to
  <filename class='directory'>/var</filename>, however modifications of
  existing files (e.g. migrating databases) are supposed to be handled by
  systemd jobs at startup (see the
  <ulink url="https://en.opensuse.org/openSUSE:Packaging_guidelines#systemd_services_.28as_a_sample_see_mariadb_package.29">initial
  configuration and deployment section of the packaging guidelines</ulink>).
</para>
<para>
  Since all changes to the root filesystem will get lost after creating the
  snapshot for the update, the system should be rebooted as fast as possible
  after the update finished.
</para>
<para>
  Every time <command>transactional-update</command> will create a new
  snapshot it will be based on the <emphasis>currently running
  system</emphasis>.
  Calling <command>transactional-update</command> multiple times without
  rebooting will <emphasis>not</emphasis> include the changes of the previous
  snapshot, thus effectively discarding all previous changes.
</para>
</refsect1>

<refsect1 id='see_also'><title>SEE ALSO</title>
<para><citerefentry><refentrytitle>transactional-update.conf</refentrytitle><manvolnum>5</manvolnum></citerefentry>,
<citerefentry project='systemd'><refentrytitle>systemd.timer</refentrytitle><manvolnum>5</manvolnum></citerefentry>,
<citerefentry project='systemd'><refentrytitle>systemd.time</refentrytitle><manvolnum>7</manvolnum></citerefentry>,
<ulink url="https://kubic.opensuse.org/documentation/transactional-update-guide/transactional-update.html">The Transactional Update Guide</ulink></para>
</refsect1>
</refentry>
